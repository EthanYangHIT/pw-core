import test from 'ava';
import { Amount } from '../..';

test('toString', (c) => {
  const t = (expected, n, fixed) => {
    c.is(new Amount(n, 100).toString(100, { fixed }), expected);
  };

  t('100.0', 99.9512986, 1);
  t('10.0', 9.95036, 1);
  t('1.0', 0.99, 1);
  t('0.10', 0.09906, 2);
  t('0.010', 0.0098034, 3);

  t('0.1', 0.1, 1);
  t('0.10', 0.1, 2);
  t('0.100', 0.1, 3);
  t('0.01', 0.01, 2);
  t('0.010', 0.01, 3);
  t('0.0100', 0.01, 4);
  t('0.00', 0.001, 2);
  t('0.001', 0.001, 3);
  t('0.0010', 0.001, 4);
  t('1.0000', 1, 4);
  t('1.0', 1, 1);
  //   t('0.0000006', 0.0000006, 7);
  t('0.00000006', 0.00000006, 8);
  t('0.000000060', 0.00000006, 9);
  t('0.0000000600', 0.00000006, 10);
  t('0.0', 0, 1);
  t('0.00', 0, 2);

  t('-1111111111111111111111.00000000', '-1111111111111111111111', 8);
  t('-0.1', -0.1, 1);
  t('-0.10', -0.1, 2);
  t('-0.100', -0.1, 3);
  t('-0.01', -0.01, 2);
  t('-0.010', -0.01, 3);
  t('-0.0100', -0.01, 4);
  t('-0.00', -0.001, 2);
  t('-0.001', -0.001, 3);
  t('-0.0010', -0.001, 4);
  t('-1.0000', -1, 4);
  t('-1.0', -1, 1);
  t('-0.00000', -0.0000006, 5);
  t('-0.0000006', -0.0000006, 7);
  t('-0.00000006', -0.00000006, 8);
  t('-0.000000060', -0.00000006, 9);
  t('-0.0000000600', -0.00000006, 10);
  t('0.0', -0, 1);
  t('0.00', -0, 2);
  t('0.00', '-0.0', 2);
  t('0.00', '-0.0000', 2);
  t('0.0000', -0, 4);

  t('0.00001', 0.00001, 5);
  t('0.00000000000000000010', '0.0000000000000000001', 20);
  t('0.00001000000000000', 0.00001, 17);
  t('1.00000000000000000', 1, 17);
  t('100000000000000128.0', '100000000000000128', 1);
  t('10000000000000128.00', '10000000000000128', 2);
  t('10000000000000128.00000000000000000000', '10000000000000128', 20);
  t('-42.000', -42, 3);
  t('-0.00000000000000000010', '-0.0000000000000000001', 20);
  t('0.12312312312312300000', '0.123123123123123', 20);

  t('1.3', 1.25, 1);
  t('234.2041', 234.20405, 4);
  t('234.2041', '234.204050000000000000000000000000006', 4);
});
