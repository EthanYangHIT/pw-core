import anyTest from 'ava';
import PWCore, { ChainID, Transaction, DepType, RawTransaction, Cell, OutPoint, CellDep, } from '..';
import { DummyCollector } from '../collectors/dummy-collector';
import { DummyProvider } from '../providers/dummy-provider';
import { Builder } from '../builders';
const test = anyTest;
const outPoint1 = new OutPoint('0x85f2eb3737f79af418361e6c6c03a5d9f0060b085a888c0c70d762842af1b6c1', '0x1');
const outPoint2 = new OutPoint('0x79221866125b9aff33c4303a6c35bde25d235e7e10025a86ca2a5d6ad657f51f', '0x0');
const outPoint3 = new OutPoint('0x79221866125b9aff33c4303a6c35bde25d235e7e10025a86ca2a5d6ad657f51f', '0x1');
const outPoint4 = new OutPoint('0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37', '0x0');
test.before(async (t) => {
    const pw = new PWCore('https://aggron.ckb.dev');
    await pw.init(new DummyProvider(), new DummyCollector(), ChainID.ckb_testnet);
    const cells = await Promise.all([
        Cell.loadFromBlockchain(pw.rpc, outPoint1),
        Cell.loadFromBlockchain(pw.rpc, outPoint2),
        Cell.loadFromBlockchain(pw.rpc, outPoint3),
    ]);
    const inputs = [cells[0]];
    const outputs = cells.slice(1);
    const cellDeps = [new CellDep(DepType.depGroup, outPoint4)];
    t.context.tx = new Transaction(new RawTransaction(inputs, outputs, cellDeps), [Builder.WITNESS_ARGS.Secp256k1]);
});
test('validate', (t) => {
    t.notThrows(() => t.context.tx.validate());
});
test.todo('getsize');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvdHJhbnNhY3Rpb24uc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQTBCLE1BQU0sS0FBSyxDQUFDO0FBQzdDLE9BQU8sTUFBTSxFQUFFLEVBQ2IsT0FBTyxFQUNQLFdBQVcsRUFDWCxPQUFPLEVBQ1AsY0FBYyxFQUNkLElBQUksRUFDSixRQUFRLEVBQ1IsT0FBTyxHQUNSLE1BQU0sSUFBSSxDQUFDO0FBQ1osT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXRDLE1BQU0sSUFBSSxHQUFHLE9BQTZDLENBQUM7QUFFM0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxRQUFRLENBQzVCLG9FQUFvRSxFQUNwRSxLQUFLLENBQ04sQ0FBQztBQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksUUFBUSxDQUM1QixvRUFBb0UsRUFDcEUsS0FBSyxDQUNOLENBQUM7QUFDRixNQUFNLFNBQVMsR0FBRyxJQUFJLFFBQVEsQ0FDNUIsb0VBQW9FLEVBQ3BFLEtBQUssQ0FDTixDQUFDO0FBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxRQUFRLENBQzVCLG9FQUFvRSxFQUNwRSxLQUFLLENBQ04sQ0FBQztBQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RCLE1BQU0sRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDaEQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxFQUFFLEVBQUUsSUFBSSxjQUFjLEVBQUUsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFOUUsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQzlCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQztRQUMxQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7UUFDMUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDO0tBQzNDLENBQUMsQ0FBQztJQUVILE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUU1RCxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLFdBQVcsQ0FDNUIsSUFBSSxjQUFjLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFDN0MsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUNqQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDckIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyJ9