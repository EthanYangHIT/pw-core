import anyTest from 'ava';
import PWCore, { ChainID, DepType, RawTransaction, Cell, OutPoint, CellDep, } from '..';
import { DummyCollector } from '../collectors/dummy-collector';
import { DummyProvider } from '../providers/dummy-provider';
const test = anyTest;
const outPoint1 = new OutPoint('0x85f2eb3737f79af418361e6c6c03a5d9f0060b085a888c0c70d762842af1b6c1', '0x1');
const outPoint2 = new OutPoint('0x79221866125b9aff33c4303a6c35bde25d235e7e10025a86ca2a5d6ad657f51f', '0x0');
const outPoint3 = new OutPoint('0x79221866125b9aff33c4303a6c35bde25d235e7e10025a86ca2a5d6ad657f51f', '0x1');
const outPoint4 = new OutPoint('0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37', '0x0');
test.before(async (t) => {
    const pw = new PWCore('https://aggron.ckb.dev');
    await pw.init(new DummyProvider(), new DummyCollector(), ChainID.ckb_testnet);
    const cells = await Promise.all([
        Cell.loadFromBlockchain(pw.rpc, outPoint1),
        Cell.loadFromBlockchain(pw.rpc, outPoint2),
        Cell.loadFromBlockchain(pw.rpc, outPoint3),
    ]);
    const inputs = [cells[0]];
    const outputs = cells.slice(1);
    const cellDeps = [new CellDep(DepType.depGroup, outPoint4)];
    t.context.raw = new RawTransaction(inputs, outputs, cellDeps);
});
test('validate', (t) => {
    t.notThrows(() => t.context.raw.validate());
});
test('toHash', (t) => {
    t.is(t.context.raw.toHash(), '0x79221866125b9aff33c4303a6c35bde25d235e7e10025a86ca2a5d6ad657f51f');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3LXRyYW5zYWN0aW9uLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL3Jhdy10cmFuc2FjdGlvbi5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBMEIsTUFBTSxLQUFLLENBQUM7QUFDN0MsT0FBTyxNQUFNLEVBQUUsRUFDYixPQUFPLEVBQ1AsT0FBTyxFQUNQLGNBQWMsRUFDZCxJQUFJLEVBQ0osUUFBUSxFQUNSLE9BQU8sR0FDUixNQUFNLElBQUksQ0FBQztBQUNaLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsTUFBTSxJQUFJLEdBQUcsT0FBaUQsQ0FBQztBQUUvRCxNQUFNLFNBQVMsR0FBRyxJQUFJLFFBQVEsQ0FDNUIsb0VBQW9FLEVBQ3BFLEtBQUssQ0FDTixDQUFDO0FBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxRQUFRLENBQzVCLG9FQUFvRSxFQUNwRSxLQUFLLENBQ04sQ0FBQztBQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksUUFBUSxDQUM1QixvRUFBb0UsRUFDcEUsS0FBSyxDQUNOLENBQUM7QUFDRixNQUFNLFNBQVMsR0FBRyxJQUFJLFFBQVEsQ0FDNUIsb0VBQW9FLEVBQ3BFLEtBQUssQ0FDTixDQUFDO0FBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDdEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUNoRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLEVBQUUsRUFBRSxJQUFJLGNBQWMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5RSxNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDO1FBQzFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQztRQUMxQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7S0FDM0MsQ0FBQyxDQUFDO0lBRUgsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRTVELENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDaEUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDckIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzlDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ25CLENBQUMsQ0FBQyxFQUFFLENBQ0YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQ3RCLG9FQUFvRSxDQUNyRSxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMifQ==