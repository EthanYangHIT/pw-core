import JSBI from 'jsbi';
import { ckbToShannon, shannonToCKB, BASE } from '../utils';
import { HexStringToBigInt } from 'ckb-js-toolkit';
export var AmountUnit;
(function (AmountUnit) {
    AmountUnit[AmountUnit["ckb"] = 0] = "ckb";
    AmountUnit[AmountUnit["shannon"] = 1] = "shannon";
})(AmountUnit || (AmountUnit = {}));
export class Amount {
    constructor(amount, unit = AmountUnit.ckb) {
        if (Number.isNaN(amount)) {
            throw new Error(`Amount ${amount} is not a valid ${AmountUnit[unit]} value`);
        }
        amount = `${amount}`;
        if (amount.startsWith('0x')) {
            amount = HexStringToBigInt(amount).toString();
        }
        if (unit === AmountUnit.shannon) {
            try {
                amount = amount.match(/^0*(\d*)$/)[1];
                if (amount === '') {
                    amount = '0';
                }
            }
            catch (e) {
                throw new Error(`Amount ${amount} is not a valid ${unit} value`);
            }
        }
        else if (unit !== AmountUnit.ckb) {
            throw new Error(`Invalid unit ${unit}`);
        }
        this.amount = amount;
        this.unit = unit;
    }
    add(val) {
        const res = JSBI.add(this.toBigInt(), val.toBigInt()).toString();
        return new Amount(res, AmountUnit.shannon);
    }
    sub(val) {
        const res = JSBI.subtract(this.toBigInt(), val.toBigInt()).toString();
        return new Amount(res, AmountUnit.shannon);
    }
    mul(val) {
        const res = JSBI.divide(JSBI.multiply(this.toBigInt(), val.toBigInt()), JSBI.BigInt(BASE)).toString();
        return new Amount(res, AmountUnit.shannon);
    }
    gt(val) {
        return JSBI.GT(this.toBigInt(), val.toBigInt());
    }
    gte(val) {
        return JSBI.greaterThanOrEqual(this.toBigInt(), val.toBigInt());
    }
    lt(val) {
        return JSBI.LT(this.toBigInt(), val.toBigInt());
    }
    lte(val) {
        return JSBI.lessThanOrEqual(this.toBigInt(), val.toBigInt());
    }
    eq(val) {
        return JSBI.EQ(this.toBigInt(), val.toBigInt());
    }
    toString(unit = AmountUnit.ckb, options) {
        if (unit === AmountUnit.shannon) {
            return this.unit === AmountUnit.shannon
                ? this.amount
                : ckbToShannon(this.amount);
        }
        else if (unit === AmountUnit.ckb) {
            return shannonToCKB(this.unit === AmountUnit.shannon
                ? this.amount
                : ckbToShannon(this.amount), options);
        }
        throw new Error(`${unit} is not a valid unit`);
    }
    toBigInt() {
        if (this.unit === AmountUnit.ckb) {
            return JSBI.BigInt(this.toString(AmountUnit.shannon));
        }
        return JSBI.BigInt(this.amount);
    }
    toHexString() {
        return `0x${this.toBigInt().toString(16)}`;
    }
}
Amount.ZERO = new Amount('0');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1vdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9hbW91bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuRCxNQUFNLENBQU4sSUFBWSxVQUdYO0FBSEQsV0FBWSxVQUFVO0lBQ3BCLHlDQUFHLENBQUE7SUFDSCxpREFBTyxDQUFBO0FBQ1QsQ0FBQyxFQUhXLFVBQVUsS0FBVixVQUFVLFFBR3JCO0FBU0QsTUFBTSxPQUFPLE1BQU07SUE0Q2pCLFlBQVksTUFBYyxFQUFFLE9BQW1CLFVBQVUsQ0FBQyxHQUFHO1FBQzNELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN4QixNQUFNLElBQUksS0FBSyxDQUNiLFVBQVUsTUFBTSxtQkFBbUIsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQzVELENBQUM7U0FDSDtRQUVELE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBRXJCLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzQixNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDL0M7UUFFRCxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQy9CLElBQUk7Z0JBQ0YsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksTUFBTSxLQUFLLEVBQUUsRUFBRTtvQkFDakIsTUFBTSxHQUFHLEdBQUcsQ0FBQztpQkFDZDthQUNGO1lBQUMsT0FBTyxDQUFD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