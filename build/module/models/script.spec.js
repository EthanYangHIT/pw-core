import anyTest from 'ava';
import PWCore, { ChainID } from '../core';
import { Address, AddressType, Script } from '.';
import { validators } from 'ckb-js-toolkit';
import { DummyProvider } from '../providers/dummy-provider';
import { DummyCollector } from '../collectors/dummy-collector';
const test = anyTest;
const address = new Address('ckt1qyqxpayn272n8km2k08hzldynj992egs0waqnr8zjs', AddressType.ckb);
const ethAddress = new Address('0x26C5F390FF2033CbB44377361c63A3Dd2DE3121d', AddressType.eth);
test.before(async (t) => {
    await new PWCore('https://aggron.ckb.dev').init(new DummyProvider(), new DummyCollector(), ChainID.ckb_testnet);
    t.context.lockScript = new Script(PWCore.config.defaultLock.script.codeHash, '0x60f493579533db6ab3cf717da49c8a5565107bba', PWCore.config.defaultLock.script.hashType);
    t.context.ethLockScript = new Script(PWCore.config.pwLock.script.codeHash, '0x26C5F390FF2033CbB44377361c63A3Dd2DE3121d', PWCore.config.pwLock.script.hashType);
});
test('validate', (t) => {
    t.notThrows(() => validators.ValidateScript(t.context.lockScript.serializeJson()));
});
test('sameWith', (t) => {
    t.true(t.context.lockScript.sameWith(t.context.lockScript), 'the t.context.two lock scripts are the same');
});
test('toAddress', (t) => {
    t.is(t.context.lockScript.toAddress().toCKBAddress(), address.toCKBAddress());
    t.is(t.context.ethLockScript.toAddress().toCKBAddress(), ethAddress.toCKBAddress());
});
test.todo('toHash');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL3NjcmlwdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBMEIsTUFBTSxLQUFLLENBQUM7QUFDN0MsT0FBTyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRS9ELE1BQU0sSUFBSSxHQUFHLE9BR1gsQ0FBQztBQUNILE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUN6QixnREFBZ0QsRUFDaEQsV0FBVyxDQUFDLEdBQUcsQ0FDaEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFHLElBQUksT0FBTyxDQUM1Qiw0Q0FBNEMsRUFDNUMsV0FBVyxDQUFDLEdBQUcsQ0FDaEIsQ0FBQztBQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3RCLE1BQU0sSUFBSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxJQUFJLENBQzdDLElBQUksYUFBYSxFQUFFLEVBQ25CLElBQUksY0FBYyxFQUFFLEVBQ3BCLE9BQU8sQ0FBQyxXQUFXLENBQ3BCLENBQUM7SUFFRixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLE1BQU0sQ0FDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFDekMsNENBQTRDLEVBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQzFDLENBQUM7SUFFRixDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFDcEMsNENBQTRDLEVBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQ3JDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNyQixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNmLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FDaEUsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3JCLENBQUMsQ0FBQyxJQUFJLENBQ0osQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQ25ELDZDQUE2QyxDQUM5QyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDdEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDLENBQUMsRUFBRSxDQUNGLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVksRUFBRSxFQUNsRCxVQUFVLENBQUMsWUFBWSxFQUFFLENBQzFCLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMifQ==