import anyTest from 'ava';
import PWCore, { ChainID } from '../core';
import { DummyCollector } from '../collectors/dummy-collector';
import { validators, transformers } from 'ckb-js-toolkit';
import { Address, AddressType, Amount, AmountUnit, Cell, OutPoint, Script, } from '.';
import { HashType } from '../interfaces';
import { DummyProvider } from '../providers/dummy-provider';
const test = anyTest;
const address = new Address('ckt1qyqxpayn272n8km2k08hzldynj992egs0waqnr8zjs', AddressType.ckb);
test.before(async (t) => {
    const pw = new PWCore('https://aggron.ckb.dev');
    await pw.init(new DummyProvider(), new DummyCollector(), ChainID.ckb_testnet);
    t.context.pw = pw;
});
// from cell at https://explorer.nervos.org/aggron/transaction/0x79221866125b9aff33c4303a6c35bde25d235e7e10025a86ca2a5d6ad657f51f
const data = 'Hello from Lay2';
const hexData = '0x48656c6c6f2066726f6d204c617932';
test('data actions', (t) => {
    const cell = new Cell(new Amount('100', AmountUnit.ckb), address.toLockScript());
    t.true(cell.isEmpty());
    // t.is(cell.resize(), 61);
    cell.setData(data);
    t.is(cell.getData(), data);
    t.is(cell.getHexData(), hexData);
    t.false(cell.isEmpty());
    cell.setHexData(hexData);
    t.is(cell.getData(), data);
    t.is(cell.getHexData(), hexData);
    cell.setData(hexData);
    t.not(cell.getData(), data);
    t.not(cell.getHexData(), hexData);
    t.throws(() => cell.setHexData(data));
});
test('loadFromBlockchain and validate', async (t) => {
    const outPoint = new OutPoint('0x79221866125b9aff33c4303a6c35bde25d235e7e10025a86ca2a5d6ad657f51f', '0x0');
    const loadedCell = await Cell.loadFromBlockchain(t.context.pw.rpc, outPoint);
    t.notThrows(() => validators.ValidateCellOutput(transformers.TransformCellOutput(loadedCell.serializeJson())));
    t.true(loadedCell.capacity.eq(new Amount('76', AmountUnit.ckb)));
    t.true(loadedCell.lock.sameWith(new Script('0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8', '0x705ca2e725e9b26e6abb842ed2043ea80197dfd7', HashType.type)));
    t.is(loadedCell.type, null);
    t.true(loadedCell.outPoint.sameWith(outPoint));
    t.is(loadedCell.getHexData(), hexData);
    t.is(loadedCell.getData(), data);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9jZWxsLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUEwQixNQUFNLEtBQUssQ0FBQztBQUM3QyxPQUFPLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMxQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEVBQ0wsT0FBTyxFQUNQLFdBQVcsRUFDWCxNQUFNLEVBQ04sVUFBVSxFQUNWLElBQUksRUFDSixRQUFRLEVBQ1IsTUFBTSxHQUNQLE1BQU0sR0FBRyxDQUFDO0FBQ1gsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsTUFBTSxJQUFJLEdBQUcsT0FBd0MsQ0FBQztBQUV0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FDekIsZ0RBQWdELEVBQ2hELFdBQVcsQ0FBQyxHQUFHLENBQ2hCLENBQUM7QUFFRixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN0QixNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQWEsRUFBRSxFQUFFLElBQUksY0FBYyxFQUFFLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRTlFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNwQixDQUFDLENBQUMsQ0FBQztBQUVILGlJQUFpSTtBQUNqSSxNQUFNLElBQUksR0FBRyxpQkFBaUIsQ0FB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