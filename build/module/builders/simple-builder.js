import { Builder } from '../builders/builder';
import { Amount, AmountUnit, Cell, RawTransaction, Transaction, } from '../models';
import PWCore from '..';
export class SimpleBuilder extends Builder {
    constructor(address, amount, feeRate, collector) {
        super(feeRate, collector);
        this.address = address;
        this.amount = amount;
    }
    async build(fee = Amount.ZERO) {
        const outputCell = new Cell(this.amount, this.address.toLockScript());
        const neededAmount = this.amount.add(Builder.MIN_CHANGE).add(fee);
        let inputSum = new Amount('0');
        const inputCells = [];
        // fill the inputs
        const cells = await this.collector.collect(PWCore.provider.address, neededAmount);
        for (const cell of cells) {
            inputCells.push(cell);
            inputSum = inputSum.add(cell.capacity);
            if (inputSum.gt(neededAmount))
                break;
        }
        if (inputSum.lt(neededAmount)) {
            throw new Error(`input capacity not enough, need ${neededAmount.toString(AmountUnit.ckb)}, got ${inputSum.toString(AmountUnit.ckb)}`);
        }
        const changeCell = new Cell(inputSum.sub(outputCell.capacity), PWCore.provider.address.toLockScript());
        const tx = new Transaction(new RawTransaction(inputCells, [outputCell, changeCell]), [Builder.WITNESS_ARGS.Secp256k1]);
        this.fee = Builder.calcFee(tx, this.feeRate);
        if (changeCell.capacity.gte(Builder.MIN_CHANGE.add(this.fee))) {
            changeCell.capacity = changeCell.capacity.sub(this.fee);
            tx.raw.outputs.pop();
            tx.raw.outputs.push(changeCell);
            return tx;
        }
        return this.build(this.fee);
    }
    getCollector() {
        return this.collector;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvc2ltcGxlLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTlDLE9BQU8sRUFFTCxNQUFNLEVBQ04sVUFBVSxFQUNWLElBQUksRUFDSixjQUFjLEVBQ2QsV0FBVyxHQUNaLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sTUFBTSxNQUFNLElBQUksQ0FBQztBQUV4QixNQUFNLE9BQU8sYUFBYyxTQUFRLE9BQU87SUFDeEMsWUFDVSxPQUFnQixFQUNoQixNQUFjLEVBQ3RCLE9BQWdCLEVBQ2hCLFNBQXFCO1FBRXJCLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFMbEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFRO0lBS3hCLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQWMsTUFBTSxDQUFDLElBQUk7UUFDbkMsTUFBTSxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDdEUsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRSxJQUFJLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixNQUFNLFVBQVUsR0FBVyxFQUFFLENBQUM7UUFFOUIsa0JBQWtCO1FBQ2xCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQ3hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUN2QixZQUFZLENBQ2IsQ0FBQztRQUNGLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEIsUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUM7Z0JBQUUsTUFBTTtTQUN0QztRQUVELElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUNiLG1DQUFtQyxZQUFZLENBQUMsUUFBUSxDQUN0RCxVQUFVLENBQUMsR0FBRyxDQUNmLFNBQVMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDOUMsQ0FBQztTQUNIO1FBRUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQ3pCLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUNqQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FDdkMsQ0FBQztRQUVGLE1BQU0sRUFBRSxHQUFHLElBQUksV0FBVyxDQUN4QixJQUFJLGNBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFDeEQsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUNqQyxDQUFDO1FBRUYsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0MsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUM3RCxVQUFVLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4RCxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNyQixFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDaEMsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztDQUNGIn0=